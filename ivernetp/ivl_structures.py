class IvlModule:
    """
    Represents an IVerilog module.

    name: the name of the module.
        This is usually declared in Verilog as a variable name and
        composed of the names of parent modules.
        Example: name = 'my_testbench.my_ripple_counter_a.my_tff_1'

    xtype: the type of the module.
        This is usually declared in Verilog as a variable's type.
        Example: xtype = 'my_ripple_counter'

    ports: a list of IvlPorts that belong to this module.
    """
    def __init__(self, name, xtype, ports=None):
        self.name = name
        self.xtype = xtype
        self.ports = ports or []

    def __repr__(self):
        return '<IvlModule: %s "%s" (%s ports)>' % (self.xtype, self.name,
                                                    len(self.ports))


class IvlPort:
    """
    Represents an IVerilog port. These belong to modules.

    name: the name of the port. Local ports get names generated by IVerilog,
        while non-local ports get their names from their Verilog declarations.

    xtype: the type of the port. This is an IvlPortType enum value.

    width: the width of the port, in bits.

    code_snippet: not currently used.

    net: the IvlNet the port belongs to.

    is_local: True if this port was generated by IVerilog, False if the port
        was declared explicitly in the Verilog code.

    direction: either IvlDataDirection.input, IvlDataDirection.output, or None
        if the port wasn't explicitly declared as an input or output.

    parent_module: the IvlModule to which this port belongs.
    """
    def __init__(self, name, xtype, width=None, code_snippet=None, net=None,
                 is_local=False, direction=None, parent_module=None):
        self.name = name
        self.xtype = xtype
        self.width = width
        self.code_snippet = code_snippet
        self.net = net or set()
        self.is_local = is_local
        self.direction = direction
        self.parent_module = parent_module

    def set_net(self, net):
        self.net = net

    def remove_net(self, net):
        self.nets.remove(net)

    def __repr__(self):
        output = '<IvlPort: '

        if self.direction:
            output += '%s ' % self.direction.name

        if self.is_local:
            output += 'local '

        output += '%s ' % self.xtype.name

        output += '"%s" ' % self.name

        if self.parent_module:
            output += 'on %s ' % self.parent_module.name

        if self.code_snippet:
            output += '@ %s ' % self.code_snippet

        output = output[:-1]
        output += '>'
        return output


class IvlNet:
    """
    Represents an IVerilog net.

    xid: The generated unique ID of this net. Usually looks something
        like '0x7fbd08d08a60'.

    name: The generated name of the net. Going by their names, nets may seem to
        "belong" to the first port they're associated with. In reality, nets
        aren't owned by any one port.

    members: A set of ports that belong to this net. Ports in this set are
        connected via this net.
    """
    def __init__(self, xid, name, members=None):
        self.xid = xid
        self.name = name
        self.members = members or set()

    def add_member(self, member):
        self.members.add(member)

    def remove_member(self, member):
        self.members.remove(member)

    def has_member(self, member):
        return member in self.members

    def __repr__(self):
        return '<IvlNet: "%s" (%s members)>' % (self.name, len(self.members))
